// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Conversation {
  id String @default(uuid()) @id
  userId String
  user User @relation(fields: [userId], references: [id])
  messages Message[]
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model Message {
  id String @default(uuid()) @id
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
  role String
  text String
  createdAt DateTime @default(now())
}

model User {
  id String @id @default(uuid())
  credentials Credential[]
  conversations Conversation[]
  thirdParties ThirdParty[]
  studyLists StudyList[]
  words WordInStudyList[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credential {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  type String
  data String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model ThirdParty {
  userId String
  user User @relation(fields: [userId], references: [id])
  provider String
  thirdPartyId String
  credentials String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, provider])
  @@unique([provider, thirdPartyId])
}

model VerificationCode {
  id String @id @default(uuid())
  bizType String
  code String
  data String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([bizType, code])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model WordEntry {
  id String @id @default(uuid())
  source String
  word String
  definitions String
  studyLists WordInStudyList[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([source, word])
}

model StudyList {
  id String @id @default(uuid())
  userId String?
  user User? @relation(fields: [userId], references: [id])
  name String
  words WordInStudyList[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WordInStudyList {
  userId String?
  user User? @relation(fields: [userId], references: [id])
  studyListId String
  studyList StudyList @relation(fields: [studyListId], references: [id])
  wordEntrySource String
  word String
  wordEntry WordEntry @relation(fields: [wordEntrySource, word], references: [source, word])
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@id([studyListId, wordEntrySource, word])
  @@index([userId])
}